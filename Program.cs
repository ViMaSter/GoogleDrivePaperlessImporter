using GoogleDrivePaperlessImporter.Modules;
using Microsoft.Extensions.Configuration;
using Serilog;
using System;
using System.ComponentModel.DataAnnotations;
using System.IO;
using GoogleDrivePaperlessImporter.Logging;
using Prometheus;
using Serilog.Core;

namespace GoogleDrivePaperlessImporter
{
    internal class Program
    {
        const string DATETIME_FORMAT = "yyyy-MM-dd HH:mm:ss.fff";
        private static void Main(string[] args)
        {
            var config = new ConfigurationBuilder()
                .SetBasePath(Directory.GetCurrentDirectory())
                .AddJsonFile("appsettings.json")
                .Build();

            using var log = CreateLogger(config.GetSection("SeqLogging").Get<LoggingOptions>());

            var metricsConfig = config.GetSection("Metrics").Get<MetricsOptions>();
            KestrelMetricServer server = null;
            if (metricsConfig is { Port: > 0 })
            {
                server = new Prometheus.KestrelMetricServer(port: metricsConfig.Port);
                log.Information($"Metrics available at http://localhost:{metricsConfig.Port}/metrics");
            }
            else
            {
                log.Warning("No port for metrics configured; not exposing metrics");
            }

            server?.Start();

            log.Information("Initializing...");
            var drive = new GoogleDrive(log, config.GetSection("GoogleDrive").Get<GoogleOptions>());
            var paperless = new Paperless(log, config.GetSection("Paperless").Get<PaperlessOptions>());

            log.Information("Starting...");
            var processor = new Processor(log, drive, paperless, config.GetSection("Processor").Get<ProcessorOptions>());
            processor.Run().Wait();

            server?.Dispose();
        }

        private static Logger CreateLogger(LoggingOptions loggingOptions)
        {
            var loggerConfig = new LoggerConfiguration()
                .Enrich.WithCaller()
                .Enrich.WithProperty("application", "googledrivepaperlessimporter")
                .WriteTo.Console(outputTemplate: $"[{{Timestamp:{DATETIME_FORMAT}}}][{{Level:u3}}][{{CallerClass}}] {{Message:lj}}{{NewLine}}{{Exception}}");

            if (loggingOptions != null && !string.IsNullOrEmpty(loggingOptions.Host) &&
                !string.IsNullOrEmpty(loggingOptions.ApiKey))
            {
                Console.WriteLine("Using also Seq for logging");
                loggerConfig.WriteTo.Seq(loggingOptions.Host, apiKey: loggingOptions.ApiKey);
            }
            else
            {
                Console.WriteLine("Using only console for logging");
            }

            return loggerConfig.CreateLogger();
        }
    }

    public class ProcessorOptions
    {
        [Required]
        public double PauseAfterCompletedListInMinutes { get; set; } = 2; // Default to 1 minute
    }

    public class GoogleOptions
    {
        // ReSharper disable InconsistentNaming property names match the JSON generated by the GCP console
        public class Credentials {
            public class Installed {
                [Required]
                public string client_id { get; set; } = default!;

                [Required]
                public string client_secret { get; set; } = default!;
            };
            [Required]
            public Installed installed { get; set; } = default!;
        };
        [Required]
        public Credentials credentials { get; set; } = default!;
        // ReSharper restore InconsistentNaming
    }

    public class PaperlessOptions
    {
        [Required]
        public string AbsoluteInstanceURL { get; set; } = default!;
        [Required]
        public string Username { get; set; } = default!;
        [Required]
        public string Password { get; set; } = default!;
    }

    public class LoggingOptions
    {
        [Required]
        public string Host { get; set; } = default!;

        [Required]
        public string ApiKey { get; set; } = default!;
    }
    public class MetricsOptions
    {
        [Required]
        public int Port { get; set; }
    }
}